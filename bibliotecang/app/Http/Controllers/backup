<?php

namespace App\Http\Controllers;

use App\Models\Livro;
use App\Models\Categoria;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Redis;
use Illuminate\Support\Facades\Storage;

class LivroController extends Controller
{
    public function index(Request $request)
    {
        // Cria√ß√£o da chave de cache com os par√¢metros de consulta
        $cacheKey = 'livros:' . md5(json_encode($request->all()));
    
        if (Redis::exists($cacheKey)) {
            $livros = collect(json_decode(Redis::get($cacheKey), true))->map(function ($livro) {
                return new Livro($livro); // Converte stdClass para inst√¢ncia do modelo Livro
            });
        } else {
            $query = Livro::with('categorias'); // Carregar categorias relacionadas
    
            if ($request->filled('titulo')) {
                $query->where('titulo', 'like', '%' . $request->titulo . '%');
            }
    
            if ($request->filled('autor')) {
                $query->where('autor', 'like', '%' . $request->autor . '%');
            }
    
            if ($request->filled('categorias')) {
                $query->whereHas('categorias', function ($q) use ($request) {
                    $q->whereIn('categorias.id', $request->categorias);
                });
            }
    
            if ($request->filled('ordenar_por') && $request->filled('ordem')) {
                $query->orderBy($request->ordenar_por, $request->ordem);
            }
    
            $livros = $query->get();
    
        }
    
        // Buscar categorias corretamente
        $categoriasCache = Redis::get('categorias_disponiveis');
        if ($categoriasCache) {
            $categorias = collect(json_decode($categoriasCache));
        } else {
            $categorias = \App\Models\Categoria::all(); // Buscar todas as categorias do banco
            Redis::setex('categorias_disponiveis', 600, $categorias->toJson());
        }
    
        return view('livros.index', compact('livros', 'categorias'));
    }
    
    public function store(Request $request)
    {
        $validated = $request->validate([
            'titulo'             => 'required|string|max:255',
            'autor'              => 'required|string|max:255',
            'isbn'               => 'required|string|max:13|unique:livros,isbn',
            'ano_publicacao'     => 'required|integer',
            'quantidade_estoque' => 'required|integer',
            'categorias'         => 'required|array|exists:categorias,id',
        ]);
    
    // Criar o livro
    $livro = Livro::create($validated);

    // Associar as categorias ao livro
    $livro->categorias()->sync($request->categorias);

            // üîπ Busca a capa automaticamente
            $capaUrl = $this->buscarCapaLivro($request->titulo, $request->isbn);
            if ($capaUrl) {
                $livro->capa = $this->baixarESalvarCapa($capaUrl, $livro->id);
                $livro->save();
            }

    // Limpar cache de categorias
    Redis::del('categorias_disponiveis');
    
    // Atualizar o cache com as novas categorias
    $categorias = \App\Models\Categoria::all();
    Redis::setex('categorias_disponiveis', 300, $categorias->toJson());

    return redirect()->route('livros.index')->with('success', 'Livro cadastrado com sucesso!');    
}
private function buscarCapaLivro($titulo, $isbn = null)
{
    $query = $isbn ?: $titulo;
    $url = "https://www.googleapis.com/books/v1/volumes?q=" . urlencode($query);

    $response = Http::get($url);
    if ($response->successful()) {
        $data = $response->json();
        if (!empty($data['items'][0]['volumeInfo']['imageLinks']['thumbnail'])) {
            return $data['items'][0]['volumeInfo']['imageLinks']['thumbnail'];
        }
    }
    return null; // Se n√£o encontrar, retorna null
}

// üîπ Baixa e salva a imagem no AWS S3


private function baixarESalvarCapa($url, $livroId)
{
    $imageData = file_get_contents($url); // Baixa a imagem
    $fileName = "capas/livro_{$livroId}.jpg"; // Define o nome do arquivo

    Storage::disk('s3')->put($fileName, $imageData, 'public'); // Salva no S3
    return Storage::disk('s3')->url($fileName); // Retorna a URL p√∫blica
}

}


<tr>
<th>ID</th>
<th>
    <a href="{{ route('livros.index', array_merge(request()->all(), [
'ordenar_por' => 'titulo',
'ordem' => (request('ordenar_por') == 'titulo' && request('ordem') == 'asc') ? 'desc' : 'asc'
])) }}">
        T√≠tulo
    </a>
</th>
<th>Autor</th>
<th>ISBN</th>
<th>Ano de Publica√ß√£o</th>
<th>Categoria</th>
<th>
    <a href="{{ route('livros.index', array_merge(request()->all(), [
'ordenar_por' => 'quantidade_estoque',
'ordem' => (request('ordenar_por') == 'quantidade_estoque' && request('ordem') == 'asc') ? 'desc' : 'asc'
])) }}">
        Quantidade em Estoque
    </a>
</th>
<th>A√ß√µes</th> <!-- Nova coluna para a√ß√µes -->
</tr>
</thead>